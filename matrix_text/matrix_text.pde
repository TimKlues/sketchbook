#include <avr/pgmspace.h>
#include <math.h>

#define PIN_SCK  13
#define PIN_MISO 12
#define	PIN_MOSI 11
#define PIN_SS   10

#define N_DISP 2

#define ThermistorPIN 0

char frameBuf[64*N_DISP];

prog_uchar font[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Char_032 
  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00, // Char_033 !
  0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, // Char_034 "
  0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, // Char_035 #
  0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, // Char_036 $
  0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00, // Char_037 %
  0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, // Char_038 &
  0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, // Char_039 '
  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, // Char_040 (
  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00, // Char_041 )
  0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, // Char_042 *
  0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00, // Char_043 +
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, // Char_044 ,
  0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, // Char_045 -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, // Char_046 .
  0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, // Char_047 /
  0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, // Char_048 0
  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, // Char_049 1
  0x78, 0xCC, 0x0C, 0x38, 0x60, 0xC0, 0xFC, 0x00, // Char_050 2
  0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00, // Char_051 3
  0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x00, // Char_052 4
  0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00, // Char_053 5
  0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, // Char_054 6
  0xFC, 0x0C, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00, // Char_055 7
  0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, // Char_056 8
  0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00, // Char_057 9
  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, // Char_058 :
  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60, // Char_059 ;
  0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, // Char_060 <
  0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00, // Char_061 =
  0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, // Char_062 >
  0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00, // Char_063 ?
  0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00, // Char_064 @
  0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00, // Char_065 A
  0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00, // Char_066 B
  0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00, // Char_067 C
  0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00, // Char_068 D
  0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00, // Char_069 E
  0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00, // Char_070 F
  0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00, // Char_071 G
  0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, // Char_072 H
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // Char_073 I
  0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00, // Char_074 J
  0x66, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x66, 0x00, // Char_075 K
  0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, // Char_076 L
  0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00, // Char_077 M
  0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, // Char_078 N
  0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, // Char_079 O
  0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, // Char_080 P
  0x3C, 0x66, 0x66, 0x66, 0x6E, 0x3C, 0x0E, 0x00, // Char_081 Q
  0x7C, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x00, // Char_082 R
  0x3C, 0x66, 0x70, 0x38, 0x0E, 0x66, 0x3C, 0x00, // Char_083 S
  0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // Char_084 T
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, // Char_085 U
  0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, // Char_086 V
  0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00, // Char_087 W
  0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00, // Char_088 X
  0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00, // Char_089 Y
  0xFE, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xFE, 0x00, // Char_090 Z
  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00, // Char_091 [
  0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, // Char_092 \
  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, // Char_093 ]
  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, // Char_093 ]
  0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, // Char_094 ^
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, // Char_095 _
  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // Char_096 `
  0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3A, 0x00, // Char_097 a
  0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00, // Char_098 b
  0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00, // Char_099 c
  0x06, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3A, 0x00, // Char_100 d
  0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, // Char_101 e
  0x1C, 0x36, 0x30, 0x78, 0x30, 0x30, 0x30, 0x00, // Char_102 f
  0x00, 0x00, 0x3A, 0x66, 0x66, 0x3E, 0x06, 0x3C, // Char_103 g
  0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x00, // Char_104 h
  0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // Char_105 i
  0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, // Char_106 j
  0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00, // Char_107 k
  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // Char_108 l
  0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0x00, // Char_109 m
  0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, // Char_110 n
  0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, // Char_111 o
  0x00, 0x00, 0x5C, 0x66, 0x66, 0x7C, 0x60, 0x60, // Char_112 p
  0x00, 0x00, 0x3A, 0x66, 0x66, 0x3E, 0x06, 0x06, // Char_113 q
  0x00, 0x00, 0x5C, 0x76, 0x60, 0x60, 0x60, 0x00, // Char_114 r
  0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00, // Char_115 s
  0x30, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00, // Char_116 t
  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3A, 0x00, // Char_117 u
  0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, // Char_118 v
  0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00, // Char_119 w
  0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, // Char_120 x
  0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C, // Char_121 y
  0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00, // Char_122 z
  0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00, // Char_123 {
  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, // Char_124 |
  0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00, // Char_125 }
  0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Char_126 ~
};
#define CHAR_MIN 32
#define CHAR_MAX 126

double Thermistor(int RawADC) {
  long Resistance;  
  double Temp;
  Resistance=((10240000/RawADC) - 10000);
  Temp = log(Resistance);
  Temp = 1 / (0.001129148 + (0.000234125 * Temp) + (0.0000000876741 * Temp * Temp * Temp));
  Temp = Temp - 273.15;
  return Temp;
}

void printDouble(double val, byte precision) {
  Serial.print (int(val));
  if( precision > 0) {
    Serial.print(".");
    unsigned long frac, mult = 1;
    byte padding = precision -1;
    while(precision--) mult *=10;
    if(val >= 0) frac = (val - int(val)) * mult; 
    else frac = (int(val) - val) * mult;
    unsigned long frac1 = frac;
    while(frac1 /= 10) padding--;
    while(padding--) Serial.print("0");
    Serial.print(frac,DEC) ;
  }
}

void sendChar(char cData){
  SPDR = cData;
  while(!(SPSR&(1<<SPIF)));
}

void sendFrame(char *frame) {
  byte d, x, y;
  char c;
  for(d=0;d<N_DISP;d++){
    digitalWrite(PIN_SS, LOW);
    delayMicroseconds(500);
    for(x=0;x<8;x++)
      for(y=0;y<8;y++){
        c=*(frame + 8*N_DISP*x + (N_DISP-(d+1))*8 + (7-y) );
        if(d==0)
          if(c&7<<5&&c&7<<2)
            c=(c&B00011111)|((((c&B11100000)>>5)-1)<<5);
        if('%'==c)
          sendChar('%'-1);
        else
          sendChar(c);
      }
    digitalWrite(PIN_SS, HIGH);
    delayMicroseconds(10);
  }
}

void setup(){
  SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
  SPSR = SPSR & B11111110;

  pinMode(PIN_SCK, OUTPUT);
  digitalWrite(PIN_SCK, LOW);
  pinMode(PIN_MOSI, OUTPUT);
  pinMode(PIN_SS, OUTPUT);
  digitalWrite(PIN_SS, HIGH);
  delayMicroseconds(500);

  digitalWrite(PIN_SS, LOW);
  delayMicroseconds(500);
  sendChar('%');
  sendChar(N_DISP);
  digitalWrite(PIN_SS, HIGH);
  delayMicroseconds(10);
  Serial.begin(115200);

  for(byte c;c<64*N_DISP;c++)
    frameBuf[c]=0;

}

void loop(){
  double temp;
  char string[] = "  Hello World!  ";

  temp=Thermistor(analogRead(ThermistorPIN));
  Serial.print("Temperature: ");
  printDouble(temp,3);
  Serial.println("");

  for(byte c=0;c<strlen(string)-1;c++) {
    for(byte x=0;x<8;x++) {
      for(byte y=0;y<8;y++) {
        byte f;
        if( pgm_read_word_near(font+(string[c]-CHAR_MIN)*8+y) & (1<<(7-x)) )
          f=y|3;
        else
          f=1<<5;
        frameBuf[y*8*N_DISP+x]=f;
        if( pgm_read_word_near(font+(string[c+1]-CHAR_MIN)*8+y) & (1<<(7-x)) )
          f=y|3;
        else
          f=1<<5;
        frameBuf[y*8*N_DISP+x+8]=f;
      }
    }
    sendFrame(frameBuf);
    delay(500*2);
  }

}



