= What it is =

This is an alternative firmware for [[http://www.sparkfun.com/products/760|Sparkfun's serial interface RGB LED Matrix]]. It was based on [[http://www.sparkfun.com/datasheets/Components/RGB_Backpack_v4.zip|Sparkfun's firmware v4]] to address some limitations.

= Motivation =

The v4 firmware had some issues:

* 255 colors only (4bit red/green, 3bit blue, minus the control char '%').
* Partial frame transfers require a reset or power off / on to synchronize the screens again.
* The control character '%' can not be used as a valid color, essentially eliminating this color.
* Daisy chain operation requires pre configuration of each board individually.
* Limit of 8 boards with daisy chain configuration.

Although there was a [[http://www.sparkfun.com/tutorial/ArduinoRGBMatrix/RGB_Backpack_v5.zip|firmware v5]] released, not everything was fixed.

= Features =

This new firmware gives new life to the boad:

* '''4096 colors'''.
* Synchronization is done when SS goes from low to high, so there is no need to reboot anymore.
* No more control characters.
* Zero configuration daisy chain operation.
* Unlimited <ref>as long as SS output port from master can handle all input slave ports from all boards</ref> boards with daisy chain configuration.

= Interfacing =

== SPI configuration ==

The controlling device must be configured as follows:

* Master.
* MSB first.
* Mode 0 (CPOL=0, CPHA=0).
* 4MHz maximum.

== Frame data packing ==

Each color has 4bits (MSB) and you need 3 bytes to store data for 2 pixels:

 |      pixel0     |      pixel1     |
 | RRRR GGGG | BBBB RRRR | GGGG BBBB |
 |   byte0   |   byte1   |   byte2   |

One frame will contain enough data to fill up all boards. A single board, will have a 96 bytes frame; two boards daisy chain, 192 bytes and so on.

The order data must be sent, is as follows. For the example configuration below:

            +--> 0x0
           /
           +---+---+---+---+ --> 31x0
 Wires ==> | 0 | 1 | 2 | 3 |
           +---+---+---+---+ --> 31x7

You must send data for each board in reverse order:

* Board 3
* Board 2
* Board 1
* Board 0

Pixels for each board, must be sent in this order:

* 0x7 to 7x7.
* 0x6 to 7x6.
* 0x5 to 7x5.
* 0x4 to 7x4.
* 0x3 to 7x3.
* 0x2 to 7x2.
* 0x1 to 7x1.
* 0x0 to 7x0.

== Frame transfer protocol ==

The firmware will accept frame data via SPI. To send a single frame, the procedure below must be followed:

# Assert SS.
# Transfer frame data:
## Send one byte.
## Delay 7us.
## Repeat the last 2 steps for the remaining bytes.
# Deassert SS.
# Delay 263us.

The delays are necessary to allow some time for the firmware to process received data before receiving more.
