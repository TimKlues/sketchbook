#include <SFRGBLEDMatrix.h>

#define PIN_MATRIX_SCK  13
#define	PIN_MATRIX_MOSI 11
#define PIN_MATRIX_SS   10

#define DISP_COUNT 2

  // grep BG noise.html | cut -d\# -f2 | cut -c-2 | gawk '{c++;printf("0x"$0",");if(16==c){print "";c=0}}'
byte plasma[]={
// radial grande quase no canto
/*
0x34,0x31,0x2e,0x2c,0x2b,0x2c,0x2e,0x31,0x34,0x38,0x3d,0x43,0x48,0x4e,0x54,0x5a,
0x2e,0x2a,0x27,0x25,0x24,0x25,0x27,0x2a,0x2e,0x33,0x38,0x3e,0x44,0x4a,0x51,0x57,
0x29,0x24,0x20,0x1e,0x1d,0x1e,0x20,0x24,0x29,0x2e,0x34,0x3a,0x40,0x47,0x4e,0x54,
0x24,0x1e,0x1a,0x17,0x15,0x17,0x1a,0x1e,0x24,0x2a,0x31,0x37,0x3e,0x45,0x4b,0x52,
0x20,0x1a,0x14,0x10,0x0e,0x10,0x14,0x1a,0x20,0x27,0x2e,0x35,0x3b,0x43,0x49,0x51,
0x1e,0x17,0x10,0x0a,0x07,0x0a,0x10,0x17,0x1e,0x25,0x2c,0x33,0x3a,0x42,0x49,0x50,
0x1d,0x15,0x0e,0x07,0x00,0x07,0x0e,0x15,0x1d,0x24,0x2b,0x32,0x3a,0x41,0x48,0x4f,
0x1e,0x17,0x10,0x0a,0x07,0x0a,0x10,0x17,0x1e,0x25,0x2c,0x33,0x3a,0x42,0x49,0x50,

// cone
/*
0x00,0x02,0x03,0x05,0x08,0x0b,0x10,0x16,0x1c,0x22,0x28,0x2c,0x30,0x32,0x35,0x37,
0x03,0x02,0x00,0x02,0x05,0x08,0x0d,0x14,0x1c,0x24,0x2b,0x30,0x33,0x36,0x38,0x39,
0x05,0x05,0x04,0x02,0x00,0x03,0x08,0x10,0x1c,0x27,0x30,0x35,0x38,0x3a,0x3b,0x3c,
0x09,0x08,0x07,0x07,0x06,0x04,0x00,0x08,0x1c,0x30,0x38,0x3b,0x3d,0x3e,0x3f,0x40,
0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x27,0x43,0x43,0x44,0x44,0x44,0x44,0x44,
0x0f,0x0f,0x10,0x11,0x12,0x14,0x17,0x1f,0x33,0x47,0x4f,0x4b,0x4a,0x48,0x48,0x47,
0x12,0x13,0x14,0x15,0x17,0x1a,0x1f,0x28,0x33,0x3f,0x47,0x4c,0x4f,0x4d,0x4c,0x4a,
0x15,0x16,0x17,0x19,0x1c,0x1f,0x25,0x2b,0x33,0x3b,0x42,0x47,0x4b,0x4d,0x4f,0x4d,
*/
// espiral

0x6d,0x5f,0x52,0x44,0x37,0x2b,0x20,0x17,0x10,0x0d,0x0d,0x11,0x18,0x20,0x2a,0x34,
0x69,0x5b,0x4d,0x3f,0x31,0x23,0x16,0x0a,0x01,0x7c,0x7d,0x04,0x0c,0x16,0x21,0x2c,
0x67,0x58,0x4a,0x3c,0x2d,0x1e,0x0f,0x00,0x72,0x6c,0x6e,0x75,0x00,0x0c,0x18,0x25,
0x67,0x58,0x4a,0x3b,0x2c,0x1d,0x0d,0x79,0x64,0x5a,0x5f,0x69,0x75,0x04,0x12,0x1f,
0x68,0x5a,0x4c,0x3e,0x2f,0x22,0x13,0x05,0x3f,0x44,0x52,0x60,0x6e,0x7d,0x0d,0x1c,
0x6c,0x5e,0x51,0x43,0x36,0x2a,0x20,0x1b,0x25,0x3a,0x4d,0x5c,0x6c,0x7b,0x0b,0x19,
0x71,0x64,0x57,0x4b,0x40,0x36,0x2f,0x2d,0x33,0x3f,0x4f,0x5d,0x6c,0x7b,0x0b,0x1a,
0x78,0x6b,0x5f,0x54,0x4b,0x43,0x3e,0x3d,0x41,0x4a,0x55,0x62,0x70,0x7e,0x0e,0x1c,

// 2 cones
/*
0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x38,0x2d,0x23,0x1c,0x19,0x1e,0x26,
0x42,0x40,0x3b,0x38,0x37,0x38,0x3b,0x40,0x40,0x34,0x27,0x1b,0x11,0x0c,0x13,0x1f,
0x3e,0x37,0x31,0x2d,0x2c,0x2d,0x31,0x37,0x3c,0x32,0x25,0x18,0x0b,0x02,0x0f,0x1c,
0x37,0x2f,0x28,0x23,0x21,0x23,0x28,0x2f,0x36,0x33,0x28,0x1c,0x12,0x0e,0x14,0x20,
0x31,0x28,0x1f,0x19,0x16,0x19,0x1f,0x28,0x31,0x33,0x2e,0x24,0x1d,0x1b,0x1f,0x27,
0x2d,0x23,0x19,0x10,0x0b,0x10,0x19,0x23,0x2d,0x37,0x37,0x2f,0x2a,0x28,0x2b,0x31,
0x2c,0x21,0x16,0x0b,0x00,0x0b,0x16,0x21,0x2c,0x37,0x41,0x3a,0x36,0x35,0x37,0x3c,
0x2d,0x23,0x19,0x10,0x0b,0x10,0x19,0x23,0x2d,0x38,0x42,0x42,0x42,0x42,0x42,0x42,
*/
};

#define SPECTRUM_LEN 42
byte spectrum[]={
  /*
  // RED
  RGB(7, 1, 0), RGB(7, 2, 0), RGB(7, 3, 0), RGB(7, 4, 0), RGB(7, 5, 0), RGB(7, 6, 0), RGB(7, 7, 0), 
  // YELLOW
  RGB(6, 7, 0), RGB(5, 7, 0), RGB(4, 7, 0), RGB(3, 7, 0), RGB(2, 7, 0), RGB(1, 7, 0), RGB(0, 7, 0), 
  // GREEN
  RGB(0, 7, 1), RGB(0, 7, 1), RGB(0, 7, 2), RGB(0, 7, 2), RGB(0, 7, 2), RGB(0, 7, 3), RGB(0, 7, 3), 
  // CYAN
  RGB(0, 6, 3), RGB(0, 5, 3), RGB(0, 4, 3), RGB(0, 3, 3), RGB(0, 2, 3), RGB(0, 1, 3), RGB(0, 0, 3), 
  // BLUE
  RGB(1, 0, 3), RGB(2, 0, 3), RGB(3, 0, 3), RGB(4, 0, 3), RGB(5, 0, 3), RGB(6, 0, 3), RGB(7, 0, 3), 
  // MAGENTA
  RGB(7, 0, 2), RGB(7, 0, 2), RGB(7, 0, 1), RGB(7, 0, 1), RGB(7, 0, 1), RGB(7, 0, 0), RGB(7, 0, 0), 
  */
  // RED
  RGB(7, 1, 0), RGB(7, 2, 0), RGB(7, 3, 0), RGB(7, 4, 0), RGB(7, 5, 0), RGB(7, 6, 0), RGB(7, 7, 0), 
  // YELLOW
  RGB(6, 7, 0), RGB(5, 7, 0), RGB(4, 7, 0), RGB(3, 7, 0), RGB(2, 7, 0), RGB(1, 7, 0), RGB(0, 7, 0), 
  // GREEN
  RGB(0, 7, 1), RGB(0, 7, 1), RGB(0, 7, 2), RGB(0, 7, 2), RGB(0, 7, 2), RGB(0, 7, 3), RGB(0, 7, 3), 
  // CYAN
  RGB(0, 6, 3), RGB(0, 5, 3), RGB(0, 4, 3), RGB(0, 3, 3), RGB(0, 2, 3), RGB(0, 1, 3), RGB(0, 0, 3), 
  // BLUE
  RGB(1, 0, 3), RGB(2, 0, 3), RGB(3, 0, 3), RGB(4, 0, 3), RGB(5, 0, 3), RGB(6, 0, 3), RGB(7, 0, 3), 
  // MAGENTA
  RGB(7, 0, 2), RGB(7, 0, 2), RGB(7, 0, 1), RGB(7, 0, 1), RGB(7, 0, 1), RGB(7, 0, 0), RGB(7, 0, 0), 
};

void setup(){

}

void loop(){
  SFRGBLEDMatrix display(SIDE, DISP_COUNT, PIN_MATRIX_SCK, PIN_MATRIX_MOSI, PIN_MATRIX_SS);
  display.config();
  while(1){
    for(byte p=0;p<display.pixels;p++)
      plasma[p]-=6;
    for(byte p=0;p<display.pixels;p++)
      display.frameBuff[p]=spectrum[int(float(plasma[p])/255.0*float(SPECTRUM_LEN-1))];
    display.show();
    delay(60);
  };
}


